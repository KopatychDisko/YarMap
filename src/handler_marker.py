'''fad'''
from collections import defaultdict

import os
import asyncio
import requests
import base64

import pandas as pd      

from aiogram import Bot, Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ContentType
from aiogram import types

from filter import ChatTypeFilter
from state import Markers

from map.map_creator import map_to_html

album_buffer = defaultdict(list)
album_processing_locks = {}

router_marker = Router()

router_marker.message.filter(
    ChatTypeFilter(chat_type="private")
)

# –ë—É—Ñ–µ—Ä –¥–ª—è –∞–ª—å–±–æ–º–æ–≤ (media groups)
album_buffer = defaultdict(list)


def delete_files_in_dir(path):
    '''Del all file'''
    for filename in os.listdir(path):
        file_path = os.path.join(path, filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Ñ–∞–π–ª–æ–º (–Ω–µ –ø–∞–ø–∫–æ–π)
        if os.path.isfile(file_path):
            os.remove(file_path)


# üìÅ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
async def save_album_photos(messages: list[Message], folder_name: str, bot: Bot) -> int:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–ø–∫—É ../image/<folder_name>/ –∫–∞–∫ 1.jpg, 2.jpg, ...
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É ../image/folder_name
    base_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'image'))
    target_folder = os.path.join(base_path, folder_name)
    os.makedirs(target_folder, exist_ok=True)

    for i, msg in enumerate(messages, start=1):
        photo = msg.photo[-1]  # —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–æ—Ç–æ
        file = await bot.get_file(photo.file_id)
        dest_path = os.path.join(target_folder, f"{i}.jpg")
        await bot.download_file(file.file_path, destination=dest_path)

    return len(messages)


async def upload_image_to_github(image_path, path_in_repo, repo_name="for_image", repo_owner="KopatychDisko", commit_message="–î–æ–±–∞–≤–∏–ª —Ñ–æ—Ç–æ", token='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'):
    '''upload image to github'''
    with open(image_path, "rb") as image_file:
        encoded_content = base64.b64encode(image_file.read()).decode("utf-8")

    url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/contents/{path_in_repo}"
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json"
    }

    data = {
        "message": commit_message,
        "content": encoded_content
    }

    response = requests.put(url, headers=headers, json=data)

    if response.status_code in [200, 201]:
        content_url = response.json()["content"]["download_url"]
        return content_url
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
        print(response.json())
        return None
    

# üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –ø–∞–ø–∫–∏
async def upload_all_images_from_folder(folder_path, folder_in_repo="uploads", repo_name="for_image", repo_owner="KopatychDisko", token='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'):
    links = []

    if not os.path.exists(folder_path):
        print(f"‚ùå –ü–∞–ø–∫–∞ {folder_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return []

    files = sorted(os.listdir(folder_path))
    for filename in files:
        if filename.lower().endswith((".jpg", ".jpeg", ".png")):
            local_path = os.path.join(folder_path, filename)
            path_in_repo = f"{folder_in_repo}/{filename}"

            url = await upload_image_to_github(
                image_path=local_path,
                path_in_repo=path_in_repo,
                repo_name=repo_name,
                repo_owner=repo_owner,
                token=token
            )
            if url:
                links.append(url)

    return links


@router_marker.message(F.text.lower() == '–º–µ—Ç–∫–∏')
async def start_markers(msg: Message, state: FSMContext):
    '''fad'''
    await msg.answer('–í–≤–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞: (—Å–∫–æ–ø–∏—Ä—É–π —Å —è–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç)', reply_markup=types.ReplyKeyboardRemove())
    
    await state.set_state(Markers.point)

    
@router_marker.message(Markers.point)
async def name_markers(msg: Message, state: FSMContext):
    '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±—ä–µ–∫—Ç–∞'''
    try:
        temp = msg.text.split(', ')
        point = tuple(map(float, temp))

        if len(point) != 2:
            await msg.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å: 53.234, 23.67')
            return

        df = pd.read_json('../data/markers.json')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ 'point' –∏–º–µ—é—Ç –¥–ª–∏–Ω—É 2
        if any(len(p) != 2 for p in df['point']):
            await msg.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.')
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∏–µ –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ DataFrame
        if any(tuple(p) == point for p in df['point']):
            await msg.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç =(')
            await state.clear()
            return

        await state.set_data({'point': point})
        await msg.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:')
        await state.set_state(Markers.name)

    except ValueError:
        await msg.answer('–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —á–∏—Å–ª–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–∞–ø—è—Ç–æ–π.')


@router_marker.message(Markers.name)
async def name(msg: Message, state: FSMContext):
    await state.update_data({'name': msg.text})
    
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:')
    
    await state.set_state(Markers.addres)

@router_marker.message(Markers.addres)
async def addres(msg: Message, state: FSMContext):
    await state.update_data({'addres': msg.text})
    
    await msg.answer('–°—É–ø–µ—Ä! –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞. (–û–ø–∏—Å–∞—Ç—å –Ω—É–∂–Ω–æ –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å)')
    
    await state.set_state(Markers.describe)
    

@router_marker.message(Markers.describe)
async def describe(msg: Message, state: FSMContext):
    '''fad'''
    await state.update_data({'describe': msg.text})
    
    await msg.answer('–û—Ü–µ–Ω–∏ –æ–±–µ—ä–µ–∫—Ç –ø–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Ç–∏ –æ—Ç 1 –¥–æ 10. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
    
    await state.set_state(Markers.stars)

    
@router_marker.message(Markers.stars)
async def stars(msg: Message, state: FSMContext):
    '''fad'''
    await state.update_data({'star': int(msg.text)})
    
    await msg.answer('–û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–ø. –ü—Ä–∏—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –º–µ—Å—Ç–∞ —Å–æ–±—ã—Ç–∏–π. (–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã —Å–∫–∏–Ω–µ—à—å —Ñ–æ—Ç–æ –±–æ—Ç –±—É–¥–µ—Ç –¥—É–º–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ 10 —Å–µ–∫ —Ç–∞–∫ —á—Ç–æ –Ω–µ –ø—É–≥–∞–π—Å—è, –æ–Ω –∂–∏–≤–æ–π)')
    
    await state.set_state(Markers.photo)
    

@router_marker.message(Markers.photo, F.media_group_id, F.content_type == ContentType.PHOTO)
async def handle_album(message: Message, bot: Bot, state: FSMContext):
    media_group_id = message.media_group_id
    album_buffer[media_group_id].append(message)

    # –ï—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if album_processing_locks.get(media_group_id):
        return

    # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
    album_processing_locks[media_group_id] = True

    # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –≤—Å–µ —Ñ–æ—Ç–æ —É—Å–ø–µ–ª–∏ –ø—Ä–∏–π—Ç–∏
    await asyncio.sleep(10)

    messages = album_buffer.pop(media_group_id, [])
    album_processing_locks.pop(media_group_id, None)  # —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥

    if not messages:
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    folder_name = data['name'].replace(' ', '_')

    count = await save_album_photos(messages, folder_name, bot)
    await message.answer("–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –¥–æ–±–∞–≤–ª—é –≤—Å–µ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞—Ä—Ç—É")

    await upload_all_images_from_folder(
        f'../image/{folder_name}',
        repo_name='for_image',
        folder_in_repo=f'image/{folder_name}'
    )

    await asyncio.sleep(10)

    data['photo'] = count

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º markers.json
    df = pd.read_json('../data/markers.json')
    df = pd.concat([df, pd.DataFrame([data])], ignore_index=True)
    df.to_json('../data/markers.json', orient='records', indent=4, force_ascii=False)

    await message.answer('–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É —Å —Ç–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏....')

    map_to_html('../data/yar_districts.json', '../data/markers.json', '../data/map.html')

    await message.reply_sticker('CAACAgIAAxkBAAKVRmf0zOU0lat_UAIqZfAiK0g31glYAALJbQACxKNIS6T3gguKQd5tNgQ')

    file = types.FSInputFile('../data/map.html')
    await message.answer_document(file, caption='–í–æ—Ç –≤–∞—à–∞ –∫–∞—Ä—Ç–∞ üìÑ')

    delete_files_in_dir('../image/')

    await state.clear()
